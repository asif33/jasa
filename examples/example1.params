simulation.auction = uk.ac.liv.auction.core.RandomRobinAuction
simulation.auction.maximumrounds = 10000

# Use a double-auction with clearing occuring every time a new shout arrives
simulation.auction.auctioneer = uk.ac.liv.auction.core.KContinuousDoubleAuctioneer
# Set the transaction price as a function of individual bid and ask prices
simulation.auction.auctioneer.pricing = uk.ac.liv.auction.core.DiscriminatoryPricingPolicy
# Set the transaction price halfway between the bid and the ask price
simulation.auction.auctioneer.pricing.k = 0.5

# Configure 3 different loggers
simulation.auction.logger = uk.ac.liv.auction.stats.CombiMarketDataLogger
simulation.auction.logger.n = 3

# The first logger collects stats on the auction as it progresses
simulation.auction.logger.0 = uk.ac.liv.auction.stats.StatsMarketDataLogger

# The second logger logs data to a graph on the console
simulation.auction.logger.1 = uk.ac.liv.auction.stats.GraphMarketDataLogger

# The third logger dumps data to CSV files
simulation.auction.logger.2 = uk.ac.liv.auction.stats.CSVMarketDataLogger
simulation.auction.logger.2.askquotelogfile = results/askquote.csv
simulation.auction.logger.2.bidquotelogfile = results/bidquote.csv
simulation.auction.logger.2.asklogfile = results/ask.csv
simulation.auction.logger.2.bidlogfile = results/bid.csv
simulation.auction.logger.2.translogfile = results/trprice.csv

# Show GUI console
simulation.console = true

# Gather meta-stats on market-equilibria
simulation.auction.stats = uk.ac.liv.auction.stats.EquilibriaStats

# Two populations of agents
simulation.agenttype.n = 2

# 1st population- 5000 sellers bidding random markups
simulation.agenttype.0 = uk.ac.liv.auction.electricity.ElectricityTrader
simulation.agenttype.0.numagents = 50
simulation.agenttype.0.randomprivatevalue = true
simulation.agenttype.0.maxprivatevalue = 100
simulation.agenttype.0.capacity = 10
simulation.agenttype.0.strategy = uk.ac.liv.auction.agent.StimuliResponseStrategy
simulation.agenttype.0.strategy.learner = uk.ac.liv.ai.learning.RothErevLearner
simulation.agenttype.0.isseller = true

# 2nd population- 5000 buyers using the Roth-Erev learning algorithm
simulation.agenttype.1 = uk.ac.liv.auction.electricity.ElectricityTrader
simulation.agenttype.1.numagents = 50
simulation.agenttype.1.randomprivatevalue = true
simulation.agenttype.1.maxprivatevalue = 100
simulation.agenttype.1.capacity = 20
simulation.agenttype.1.strategy = uk.ac.liv.auction.agent.StimuliResponseStrategy
simulation.agenttype.1.strategy.learner = uk.ac.liv.ai.learning.RothErevLearner
simulation.agenttype.1.isseller = false

# log4j configuration
log4j.rootCategory=INFO, stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%m%n
