# This example demonstrates a uniform-price k-DA with a large number
# of agents.
#
# To run this example in RePast, run the following command:
#
#  java uk.ac.liv.auction.RepastMarketSimulation jasa/examples/example2.params
#

# Use a random-robin auction which will randomise the order in which agents bid
simulation.auction = uk.ac.liv.auction.core.RandomRobinAuction
simulation.auction.name = Example 2: Uniform-price k-DA

# The auction will close after 1000 rounds (or "ticks")
simulation.auction.maximumrounds = 10000

# Show GUI console
simulation.auction.console = true

# Use a k-DA auctioneer which will clear the auction after each round
simulation.auction.auctioneer = uk.ac.liv.auction.core.KDoubleAuctioneer
# Set a uniform transaction-price based on current market quote.
simulation.auction.auctioneer.pricing = uk.ac.liv.auction.core.UniformPricingPolicy
# Set the transaction price halfway between the bid-ask spread.
simulation.auction.auctioneer.pricing.k = 0.5

# Configure a combination of two different loggers
simulation.auction.logger = uk.ac.liv.auction.stats.CombiMarketDataLogger
simulation.auction.logger.n = 2

# 1st logger collects statistics on the auction as it progresses
simulation.auction.logger.0 = uk.ac.liv.auction.stats.StatsMarketDataLogger

# 2nd logger logs data to a graph on the console
simulation.auction.logger.1 = uk.ac.liv.auction.stats.GraphMarketDataLogger

# Produce a report on the equilibrium price and quantity
simulation.auction.stats = uk.ac.liv.auction.stats.EquilibriaStats

# Two populations of agents
simulation.auction.agenttype.n = 2

# 1st population- 5000 ZI-C sellers
simulation.auction.agenttype.0 = uk.ac.liv.auction.zi.ZITraderAgent
simulation.auction.agenttype.0.numagents = 500
simulation.auction.agenttype.0.initialtradeentitlement = 1000
simulation.auction.agenttype.0.strategy = uk.ac.liv.auction.agent.RandomConstrainedStrategy
simulation.auction.agenttype.0.strategy.maxmarkup = 100
simulation.auction.agenttype.0.isseller = true
# Valuations (limit prices) will be drawn randomly when agents are initialised
simulation.auction.agenttype.0.valuer = uk.ac.liv.auction.agent.RandomValuer
# Range for valuations is (110, 200)
simulation.auction.agenttype.0.valuer.minvalue = 110
simulation.auction.agenttype.0.valuer.maxvalue = 200

# 2nd population- 5000 ZI-C buyers
simulation.auction.agenttype.1 = uk.ac.liv.auction.zi.ZITraderAgent
simulation.auction.agenttype.1.numagents = 500
simulation.auction.agenttype.1.initialtradeentitlement = 1000
simulation.auction.agenttype.1.strategy = uk.ac.liv.auction.agent.RandomConstrainedStrategy
simulation.auction.agenttype.1.strategy.maxmarkup = 100
simulation.auction.agenttype.1.isseller = false
# Valuations (limit prices) will be drawn randomly when agents are initialised
simulation.auction.agenttype.1.valuer = uk.ac.liv.auction.agent.RandomValuer
# Range for valuations is (120, 250)
simulation.auction.agenttype.1.valuer.minvalue = 120
simulation.auction.agenttype.1.valuer.maxvalue = 250

# PRNG configuration
#  Use the RanMar algorithm
simulation.prng = uk.ac.liv.prng.Mar
#  with the following PRNG seed
simulation.seed = 4523

# log4j configuration - substitute DEBUG for INFO to turn on debugging output
log4j.rootCategory=INFO, stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%m%n
