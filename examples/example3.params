# This example demonstrates randomly changing supply and demand schedules
#
# To run this example, run the following command:
#
#  java uk.ac.liv.auction.MarketSimulation jasa/examples/example1.params
#

# Use a random-robin auction which will randomise the shouting order
simulation.auction = uk.ac.liv.auction.core.RandomRobinAuction
simulation.auction.maximumrounds = 1000
simulation.auction.lengthofday = 20
simulation.auction.maximumdays = 50
simulation.auction.name = Example 3: Dynamic supply and demand

# Use a double-auction with clearing occuring at the end of each round
simulation.auction.auctioneer = uk.ac.liv.auction.core.KDoubleAuctioneer
# Set the transaction price as a function of individual bid and ask prices
simulation.auction.auctioneer.pricing = uk.ac.liv.auction.core.DiscriminatoryPricingPolicy
# Set the transaction price halfway between the bid and the ask price
simulation.auction.auctioneer.pricing.k = 0.5

# Configure a combination of two different loggers
simulation.auction.logger = uk.ac.liv.auction.stats.CombiMarketDataLogger
simulation.auction.logger.n = 3

# The first logger collects stats on the auction as it progresses
simulation.auction.logger.0 = uk.ac.liv.auction.stats.StatsMarketDataLogger

# The second logger logs data to a graph on the console
simulation.auction.logger.1 = uk.ac.liv.auction.stats.GraphMarketDataLogger

# Collect per-day statistics for agent strategies
simulation.auction.logger.2 = uk.ac.liv.auction.stats.DailyStatsMarketDataLogger

# Show GUI console
simulation.auction.console = true

# Two populations of agents
simulation.auction.agenttype.n = 3

# 1st population-
#  50 electricity sellers with a capacity of 10MWh
#  using the Roth-Erev strategy
simulation.auction.agenttype.0 = uk.ac.liv.auction.zi.ZITraderAgent
simulation.auction.agenttype.0.numagents = 70
simulation.auction.agenttype.0.initialtradeentitlement = 10
simulation.auction.agenttype.0.valuer = uk.ac.liv.auction.agent.RandomScheduleValuer
simulation.auction.agenttype.0.valuer.minvalue = 50
simulation.auction.agenttype.0.valuer.maxvalue = 100
simulation.auction.agenttype.0.strategy = uk.ac.liv.auction.agent.StimuliResponseStrategy
simulation.auction.agenttype.0.strategy.markupscale = 10
simulation.auction.agenttype.0.strategy.learner = uk.ac.liv.ai.learning.NPTRothErevLearner
simulation.auction.agenttype.0.strategy.learner.k = 10
simulation.auction.agenttype.0.isseller = true

# 2nd population-
#  50 electricity buyers with a capacity of 20MWh
#  using the modified Roth-Erev strategy
simulation.auction.agenttype.1 = uk.ac.liv.auction.zi.ZITraderAgent
simulation.auction.agenttype.1.numagents = 20
simulation.auction.agenttype.1.initialtradeentitlement = 10
simulation.auction.agenttype.1.valuer = uk.ac.liv.auction.agent.RandomScheduleValuer
simulation.auction.agenttype.1.valuer.minvalue = 80
simulation.auction.agenttype.1.valuer.maxvalue = 150
simulation.auction.agenttype.1.strategy = uk.ac.liv.auction.agent.StimuliResponseStrategy
simulation.auction.agenttype.1.strategy.markupscale = 10
simulation.auction.agenttype.1.strategy.learner = uk.ac.liv.ai.learning.StatelessQLearner
simulation.auction.agenttype.1.strategy.learner.k = 10
simulation.auction.agenttype.1.isseller = false

#  3rd population-
#   3 buyers using Kaplan
simulation.auction.agenttype.2 = uk.ac.liv.auction.zi.ZITraderAgent
simulation.auction.agenttype.2.numagents = 50
simulation.auction.agenttype.2.initialtradeentitlement = 10
simulation.auction.agenttype.2.valuer = uk.ac.liv.auction.agent.RandomScheduleValuer
simulation.auction.agenttype.2.valuer.minvalue = 10
simulation.auction.agenttype.2.valuer.maxvalue = 200
simulation.auction.agenttype.2.strategy = uk.ac.liv.auction.agent.KaplanStrategy
simulation.auction.agenttype.2.isseller = false

# prng configuration
simulation.prng = uk.ac.liv.prng.MT
simulation.seed = 7842

# log4j configuration
log4j.rootCategory=INFO, stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%m%n
